// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rchapin/go-geocache-api/model (interfaces: CacheStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rchapin/go-geocache-api/model"
)

// MockCacheStore is a mock of CacheStore interface.
type MockCacheStore struct {
	ctrl     *gomock.Controller
	recorder *MockCacheStoreMockRecorder
}

// MockCacheStoreMockRecorder is the mock recorder for MockCacheStore.
type MockCacheStoreMockRecorder struct {
	mock *MockCacheStore
}

// NewMockCacheStore creates a new mock instance.
func NewMockCacheStore(ctrl *gomock.Controller) *MockCacheStore {
	mock := &MockCacheStore{ctrl: ctrl}
	mock.recorder = &MockCacheStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheStore) EXPECT() *MockCacheStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCacheStore) Create(arg0 string, arg1, arg2 float64, arg3 []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCacheStoreMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCacheStore)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockCacheStore) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheStore)(nil).Delete), arg0)
}

// DeleteAll mocks base method.
func (m *MockCacheStore) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockCacheStoreMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockCacheStore)(nil).DeleteAll))
}

// FindNearest mocks base method.
func (m *MockCacheStore) FindNearest(arg0, arg1, arg2 float64, arg3 int) ([]model.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearest indicates an expected call of FindNearest.
func (mr *MockCacheStoreMockRecorder) FindNearest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearest", reflect.TypeOf((*MockCacheStore)(nil).FindNearest), arg0, arg1, arg2, arg3)
}

// GetAll mocks base method.
func (m *MockCacheStore) GetAll() ([]model.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCacheStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCacheStore)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockCacheStore) GetById(arg0 uint64) (model.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(model.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCacheStoreMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCacheStore)(nil).GetById), arg0)
}

// GetByName mocks base method.
func (m *MockCacheStore) GetByName(arg0 string) (model.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(model.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCacheStoreMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCacheStore)(nil).GetByName), arg0)
}

// GetByTags mocks base method.
func (m *MockCacheStore) GetByTags(arg0 []string) ([]model.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTags", arg0)
	ret0, _ := ret[0].([]model.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTags indicates an expected call of GetByTags.
func (mr *MockCacheStoreMockRecorder) GetByTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTags", reflect.TypeOf((*MockCacheStore)(nil).GetByTags), arg0)
}

// Shutdown mocks base method.
func (m *MockCacheStore) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockCacheStoreMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCacheStore)(nil).Shutdown))
}

// Update mocks base method.
func (m *MockCacheStore) Update(arg0 string, arg1 model.Cache) (model.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(model.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCacheStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCacheStore)(nil).Update), arg0, arg1)
}
