// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rchapin/go-geocache-api/geostore (interfaces: GeoStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	geostore "github.com/rchapin/go-geocache-api/geostore"
)

// MockGeoStore is a mock of GeoStore interface.
type MockGeoStore struct {
	ctrl     *gomock.Controller
	recorder *MockGeoStoreMockRecorder
}

// MockGeoStoreMockRecorder is the mock recorder for MockGeoStore.
type MockGeoStoreMockRecorder struct {
	mock *MockGeoStore
}

// NewMockGeoStore creates a new mock instance.
func NewMockGeoStore(ctrl *gomock.Controller) *MockGeoStore {
	mock := &MockGeoStore{ctrl: ctrl}
	mock.recorder = &MockGeoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoStore) EXPECT() *MockGeoStoreMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockGeoStore) Find(arg0, arg1 float64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockGeoStoreMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGeoStore)(nil).Find), arg0, arg1)
}

// FindNearest mocks base method.
func (m *MockGeoStore) FindNearest(arg0, arg1, arg2 float64, arg3 int) []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// FindNearest indicates an expected call of FindNearest.
func (mr *MockGeoStoreMockRecorder) FindNearest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearest", reflect.TypeOf((*MockGeoStore)(nil).FindNearest), arg0, arg1, arg2, arg3)
}

// Insert mocks base method.
func (m *MockGeoStore) Insert(arg0 *geostore.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", arg0)
}

// Insert indicates an expected call of Insert.
func (mr *MockGeoStoreMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGeoStore)(nil).Insert), arg0)
}

// Shutdown mocks base method.
func (m *MockGeoStore) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockGeoStoreMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockGeoStore)(nil).Shutdown))
}

// getRootQuadTree mocks base method.
func (m *MockGeoStore) getRootQuadTree() *geostore.QuadTree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRootQuadTree")
	ret0, _ := ret[0].(*geostore.QuadTree)
	return ret0
}

// getRootQuadTree indicates an expected call of getRootQuadTree.
func (mr *MockGeoStoreMockRecorder) getRootQuadTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRootQuadTree", reflect.TypeOf((*MockGeoStore)(nil).getRootQuadTree))
}
